// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: location_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocationManagementClient is the client API for LocationManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationManagementClient interface {
	CalculateDistance(ctx context.Context, in *CalculateDistanceRequest, opts ...grpc.CallOption) (*CalculateDistanceResponse, error)
}

type locationManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationManagementClient(cc grpc.ClientConnInterface) LocationManagementClient {
	return &locationManagementClient{cc}
}

func (c *locationManagementClient) CalculateDistance(ctx context.Context, in *CalculateDistanceRequest, opts ...grpc.CallOption) (*CalculateDistanceResponse, error) {
	out := new(CalculateDistanceResponse)
	err := c.cc.Invoke(ctx, "/LocationManagement/CalculateDistance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationManagementServer is the server API for LocationManagement service.
// All implementations must embed UnimplementedLocationManagementServer
// for forward compatibility
type LocationManagementServer interface {
	CalculateDistance(context.Context, *CalculateDistanceRequest) (*CalculateDistanceResponse, error)
	mustEmbedUnimplementedLocationManagementServer()
}

// UnimplementedLocationManagementServer must be embedded to have forward compatible implementations.
type UnimplementedLocationManagementServer struct {
}

func (UnimplementedLocationManagementServer) CalculateDistance(context.Context, *CalculateDistanceRequest) (*CalculateDistanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateDistance not implemented")
}
func (UnimplementedLocationManagementServer) mustEmbedUnimplementedLocationManagementServer() {}

// UnsafeLocationManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationManagementServer will
// result in compilation errors.
type UnsafeLocationManagementServer interface {
	mustEmbedUnimplementedLocationManagementServer()
}

func RegisterLocationManagementServer(s grpc.ServiceRegistrar, srv LocationManagementServer) {
	s.RegisterService(&LocationManagement_ServiceDesc, srv)
}

func _LocationManagement_CalculateDistance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateDistanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationManagementServer).CalculateDistance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocationManagement/CalculateDistance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationManagementServer).CalculateDistance(ctx, req.(*CalculateDistanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocationManagement_ServiceDesc is the grpc.ServiceDesc for LocationManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LocationManagement",
	HandlerType: (*LocationManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateDistance",
			Handler:    _LocationManagement_CalculateDistance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "location_service.proto",
}

// LocationHistoryClient is the client API for LocationHistory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationHistoryClient interface {
	SaveUserLocation(ctx context.Context, in *SaveUserLocationRequest, opts ...grpc.CallOption) (*SaveUserLocationResponse, error)
}

type locationHistoryClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationHistoryClient(cc grpc.ClientConnInterface) LocationHistoryClient {
	return &locationHistoryClient{cc}
}

func (c *locationHistoryClient) SaveUserLocation(ctx context.Context, in *SaveUserLocationRequest, opts ...grpc.CallOption) (*SaveUserLocationResponse, error) {
	out := new(SaveUserLocationResponse)
	err := c.cc.Invoke(ctx, "/LocationHistory/SaveUserLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationHistoryServer is the server API for LocationHistory service.
// All implementations must embed UnimplementedLocationHistoryServer
// for forward compatibility
type LocationHistoryServer interface {
	SaveUserLocation(context.Context, *SaveUserLocationRequest) (*SaveUserLocationResponse, error)
	mustEmbedUnimplementedLocationHistoryServer()
}

// UnimplementedLocationHistoryServer must be embedded to have forward compatible implementations.
type UnimplementedLocationHistoryServer struct {
}

func (UnimplementedLocationHistoryServer) SaveUserLocation(context.Context, *SaveUserLocationRequest) (*SaveUserLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserLocation not implemented")
}
func (UnimplementedLocationHistoryServer) mustEmbedUnimplementedLocationHistoryServer() {}

// UnsafeLocationHistoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationHistoryServer will
// result in compilation errors.
type UnsafeLocationHistoryServer interface {
	mustEmbedUnimplementedLocationHistoryServer()
}

func RegisterLocationHistoryServer(s grpc.ServiceRegistrar, srv LocationHistoryServer) {
	s.RegisterService(&LocationHistory_ServiceDesc, srv)
}

func _LocationHistory_SaveUserLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationHistoryServer).SaveUserLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocationHistory/SaveUserLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationHistoryServer).SaveUserLocation(ctx, req.(*SaveUserLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocationHistory_ServiceDesc is the grpc.ServiceDesc for LocationHistory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationHistory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LocationHistory",
	HandlerType: (*LocationHistoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveUserLocation",
			Handler:    _LocationHistory_SaveUserLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "location_service.proto",
}
